// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaclientmx.actions;

import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import org.eclipse.milo.opcua.stack.core.types.builtin.DataValue;
import org.eclipse.milo.opcua.stack.core.types.builtin.NodeId;
import org.eclipse.milo.opcua.stack.core.types.builtin.StatusCode;
import org.eclipse.milo.opcua.stack.core.types.builtin.Variant;
import org.eclipse.milo.opcua.stack.core.types.enumerated.TimestampsToReturn;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import opcuaclientmx.impl.OpcUaClientManager;

public class OpcUaRead extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __OpcUaServerCfg;
	private opcuaclientmx.proxies.OpcUaServerCfg OpcUaServerCfg;
	private java.lang.String nodeId;

	public OpcUaRead(IContext context, IMendixObject OpcUaServerCfg, java.lang.String nodeId)
	{
		super(context);
		this.__OpcUaServerCfg = OpcUaServerCfg;
		this.nodeId = nodeId;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.OpcUaServerCfg = this.__OpcUaServerCfg == null ? null : opcuaclientmx.proxies.OpcUaServerCfg.initialize(getContext(), __OpcUaServerCfg);

		// BEGIN USER CODE
		OpcUaClient client = OpcUaClientManager.retrieve(this.context(), this.OpcUaServerCfg);
		logger.trace(String.format("[Read] Reading from [Server:%s|NodeId:%s]",this.OpcUaServerCfg.getServerID(),this.nodeId) );

		NodeId requestedData;
		try {
			requestedData = NodeId.parse(this.nodeId);
		} catch (Exception e) {
			throw new CoreException("Unable to connect to the node, is your NodeId accurate?",e);
		}
		
		DataValue response;
		try {
			response = client.readValue(0, TimestampsToReturn.Both, requestedData).get();
		} catch (Exception e) {
			throw new CoreException("Unable to read the value from node: " + this.nodeId,e);
		}
		

		if( logger.isTraceEnabled())
			logger.trace(String.format("[Read] Response from [Server:%s|NodeId:%s]; Response data: \"%s;\"",this.OpcUaServerCfg.getServerID(),this.nodeId,response.toString()) );

		if ( response.getStatusCode() == StatusCode.GOOD ) {
			Variant val = response.getValue();

			if( logger.isTraceEnabled())
				logger.trace(String.format("[Read] Response from [Server:%s|NodeId:%s]; Data Type: \"%s;\"",this.OpcUaServerCfg.getServerID(),this.nodeId,val.getDataType()) );
			Object varVal = val.getValue();
			if( varVal != null ) 
				return varVal.toString();
			else 
				return null;
		}
		else {
			String status = response.getStatusCode().toString();
			String responseStr = "(none)";
			try { responseStr = response.getValue().getValue().toString(); } catch(Exception e) {}; //We don't care about this error, we want the response if it's there but doesn't matter if it's blank
		
			throw new CoreException(String.format("Error Reading from [Server:%s|NodeId:%s]; Status: \"%s;\" Response: \"%s\"",this.OpcUaServerCfg.getServerID(),this.nodeId,status,responseStr));
		}

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "OpcUaRead";
	}

	// BEGIN EXTRA CODE
    private static final ILogNode logger = Core.getLogger("OpcUA");
	// END EXTRA CODE
}
